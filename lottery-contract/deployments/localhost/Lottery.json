{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__loteryAlreadyOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__notEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__notOpened",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lottery__FailedTranfer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ChoosingWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LotteryClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfTickets",
          "type": "uint256"
        }
      ],
      "name": "LotteryEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LotteryStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "TestUpkeep",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WinnerChosen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "WinnerRequestSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chooseWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTicketPerPlayer",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "playerAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "numberOfTickets",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Lottery.Player[]",
              "name": "players",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "lotteryState",
              "type": "string"
            }
          ],
          "internalType": "struct Lottery.LotteryData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_ticketFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        }
      ],
      "name": "setAdminAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketSuply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketsPerUser",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "durationInHours",
          "type": "uint256"
        }
      ],
      "name": "startLotery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x278215a04fab9bc59e2985585c902b5ce4ad71c4623cb12abf438bc3c5630893",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "2395042",
    "logsBloom": "0x
    "blockHash": "0xd60e3974ae5e7fe10a77a2d7dee991358c33b22c57244828b6dca6fdfeb8bec7",
    "transactionHash": "0x278215a04fab9bc59e2985585c902b5ce4ad71c4623cb12abf438bc3c5630893",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x278215a04fab9bc59e2985585c902b5ce4ad71c4623cb12abf438bc3c5630893",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd60e3974ae5e7fe10a77a2d7dee991358c33b22c57244828b6dca6fdfeb8bec7"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "2395042",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x3718c360Aa8EA1Aa6706a960875BB405AEAbEE57",
    "2600000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "93b0a3fcc0f67cd9ddbc9745b9662945",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__loteryAlreadyOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__notEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__notOpened\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lottery__FailedTranfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChoosingWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LotteryClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"}],\"name\":\"LotteryEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LotteryStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"TestUpkeep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinnerChosen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"WinnerRequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chooseWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTicketPerPlayer\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"}],\"internalType\":\"struct Lottery.Player[]\",\"name\":\"players\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"lotteryState\",\"type\":\"string\"}],\"internalType\":\"struct Lottery.LotteryData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_ticketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketSuply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInHours\",\"type\":\"uint256\"}],\"name\":\"startLotery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michal Vokolek\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A fair lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating untamperable decentralized lottery with fair chance for everyone to win.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\nerror Lottery__notEnoughETH();\\nerror lottery__FailedTranfer();\\nerror Lottery__notOpened();\\nerror Lottery__loteryAlreadyOpened();\\n\\n/** @title A fair lottery contract\\n    @author Michal Vokolek\\n    @notice This contract is for creating untamperable decentralized lottery with fair chance for everyone to win.\\n */\\n\\ncontract Lottery is VRFConsumerBaseV2, Ownable, AutomationCompatible {\\n    struct LotteryData {\\n        uint256 ticketFee;\\n        uint256 ticketSupply;\\n        uint256 maxTicketPerPlayer;\\n        Player[] players;\\n        uint256 deadline;\\n        string lotteryState;\\n    }\\n\\n    struct Player {\\n        address playerAddress;\\n        uint256 numberOfTickets;\\n    }\\n\\n    event LotteryEntered(address player, uint256 numberOfTickets);\\n    event LotteryStarted();\\n    event LotteryClosed();\\n    event ChoosingWinner();\\n    event WinnerRequestSent(uint256 indexed requestId);\\n    event TestUpkeep(uint256 blockTimestamp, uint256 deadline);\\n    event WinnerChosen(address indexed winner, uint256 amount);\\n\\n    enum LotteryState {\\n        Open,\\n        Closed,\\n        ChoosingWinner\\n    }\\n    uint256 public s_ticketFee;\\n    uint256 private s_ticketSupply;\\n    uint256 s_maxTicketsPerPlayer;\\n    address payable[] private s_tickets;\\n    mapping(address => uint256) private s_ticketsPerPlayer;\\n    address[] private s_ticketsPerPlayerKeys;\\n    uint256 private s_lotteryDeadline;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    LotteryState private s_lotteryState;\\n    uint256 public totalTickets;\\n    //values for requesting random number from Chainlink VRF\\n    bytes32 private immutable i_keyHas;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n    address private s_adminAddress;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        address adminAddress,\\n        uint256 entranceFee,\\n        bytes32 key_hash,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        s_ticketFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_keyHas = key_hash;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.Closed;\\n        s_adminAddress = adminAddress;\\n    }\\n\\n    //automation compatible functions for Chainlink\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData */\\n    )\\n        public\\n        override\\n        returns (bool upkeepNeeded, bytes memory /*performData */)\\n    {\\n        //last time to buy tickets is 5 minutes before the deadline\\n        bool choosingWinner = s_lotteryState == LotteryState.Open &&\\n            block.timestamp + 5 minutes > s_lotteryDeadline;\\n        if (choosingWinner) {\\n            s_lotteryState = LotteryState.ChoosingWinner;\\n            emit ChoosingWinner();\\n        }\\n        emit TestUpkeep(block.timestamp, s_lotteryDeadline);\\n        upkeepNeeded =\\n            s_lotteryState == LotteryState.ChoosingWinner &&\\n            block.timestamp >= s_lotteryDeadline;\\n    }\\n\\n    function requestRandomNumber() public onlyOwner {\\n        uint256 requestResult = i_vrfCoordinator.requestRandomWords(\\n            i_keyHas,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit WinnerRequestSent(requestResult);\\n    }\\n\\n    function performUpkeep(bytes memory /*performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(bytes(\\\"\\\"));\\n        require(upkeepNeeded, \\\"No upkeep needed\\\");\\n        s_lotteryState = LotteryState.ChoosingWinner;\\n        uint256 requestResult = i_vrfCoordinator.requestRandomWords(\\n            i_keyHas,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit WinnerRequestSent(requestResult);\\n    }\\n\\n    function enterLottery() public payable {\\n        if (s_lotteryState != LotteryState.Open) {\\n            revert Lottery__notOpened();\\n        }\\n        if (msg.value < s_ticketFee) {\\n            revert Lottery__notEnoughETH();\\n        }\\n        uint256 numOfTickets = msg.value / s_ticketFee;\\n        totalTickets += numOfTickets;\\n        for (uint256 i = 0; i < numOfTickets; i++) {\\n            s_tickets.push(payable(msg.sender));\\n        }\\n\\n        if (s_ticketsPerPlayer[msg.sender] == 0) {\\n            s_ticketsPerPlayerKeys.push(msg.sender);\\n        }\\n        s_ticketsPerPlayer[msg.sender] += numOfTickets;\\n        emit LotteryEntered(msg.sender, numOfTickets);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_lotteryState = LotteryState.Closed;\\n        uint256 winnerIndex = randomWords[0] % s_tickets.length;\\n        address payable winner = s_tickets[winnerIndex];\\n        uint256 winnerShare = (address(this).balance * 90) / 100;\\n        (bool success, ) = winner.call{value: winnerShare}(\\\"\\\");\\n        (bool sc, ) = s_adminAddress.call{value: address(this).balance}(\\\"\\\");\\n        emit WinnerChosen(winner, winnerShare);\\n        resetState();\\n        if (!success || !sc) {\\n            revert lottery__FailedTranfer();\\n        }\\n    }\\n\\n    function chooseWinner() public onlyOwner {\\n        if (s_lotteryState != LotteryState.ChoosingWinner) {\\n            revert Lottery__loteryAlreadyOpened();\\n        }\\n        s_lotteryState = LotteryState.Closed;\\n        uint256 winnerIndex = s_tickets.length / 2;\\n        address payable winner = s_tickets[winnerIndex];\\n        s_tickets = new address payable[](0);\\n        uint256 winnerShare = (address(this).balance * 90) / 100;\\n        (bool success, ) = winner.call{value: winnerShare}(\\\"\\\");\\n        (bool sc, ) = s_adminAddress.call{value: address(this).balance}(\\\"\\\");\\n        emit WinnerChosen(winner, winnerShare);\\n        if (!success || !sc) {\\n            revert lottery__FailedTranfer();\\n        }\\n    }\\n\\n    function startLotery(\\n        uint256 ticketFee,\\n        uint256 ticketSuply,\\n        uint256 ticketsPerUser,\\n        uint256 durationInHours\\n    ) external onlyOwner {\\n        if (s_lotteryState == LotteryState.Open) {\\n            revert Lottery__loteryAlreadyOpened();\\n        }\\n        s_ticketFee = ticketFee;\\n        s_ticketSupply = ticketSuply;\\n        s_maxTicketsPerPlayer = ticketsPerUser;\\n        s_lotteryDeadline = block.timestamp + (durationInHours * 1 minutes);\\n        s_lotteryState = LotteryState.Open;\\n        emit LotteryStarted();\\n    }\\n\\n    function closeLottery() external onlyOwner {\\n        if (s_lotteryState != LotteryState.Open) {\\n            revert Lottery__notOpened();\\n        }\\n        s_lotteryState = LotteryState.Closed;\\n        s_tickets = new address payable[](0);\\n\\n        emit LotteryClosed();\\n    }\\n\\n    function getLotteryState() external view returns (LotteryData memory) {\\n        string memory state;\\n        if (s_lotteryState == LotteryState.Open) {\\n            state = \\\"Open\\\";\\n        } else if (s_lotteryState == LotteryState.Closed) {\\n            state = \\\"Closed\\\";\\n        } else {\\n            state = \\\"Choosing winner\\\";\\n        }\\n        Player[] memory players = new Player[](s_ticketsPerPlayerKeys.length);\\n        for (uint256 i = 0; i < s_ticketsPerPlayerKeys.length; i++) {\\n            players[i] = Player(\\n                s_ticketsPerPlayerKeys[i],\\n                s_ticketsPerPlayer[s_ticketsPerPlayerKeys[i]]\\n            );\\n        }\\n        return\\n            LotteryData(\\n                s_ticketFee,\\n                s_ticketSupply,\\n                s_maxTicketsPerPlayer,\\n                players,\\n                s_lotteryDeadline,\\n                state\\n            );\\n    }\\n\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function setAdminAddress(address adminAddress) external onlyOwner {\\n        s_adminAddress = adminAddress;\\n    }\\n\\n    function getUserTickets(\\n        address userAddress\\n    ) external view returns (uint256) {\\n        return s_ticketsPerPlayer[userAddress];\\n    }\\n\\n    function resetState() internal {\\n        address[] memory keys = s_ticketsPerPlayerKeys;\\n        s_tickets = new address payable[](0);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            s_ticketsPerPlayer[keys[i]] = 0;\\n        }\\n        s_ticketsPerPlayerKeys = new address payable[](0);\\n        s_lotteryState = LotteryState.Closed;\\n        s_ticketSupply = 0;\\n        s_maxTicketsPerPlayer = 0;\\n        emit LotteryClosed();\\n    }\\n}\\n\",\"keccak256\":\"0x96b06a97e39d8f64bc4b326c23d03a29b651540504ad502ad68f2165369ca4c6\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162002d6d38038062002d6d8339818101604052810190620000389190620003af565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200008e620000826200017d60201b60201c565b6200018560201b60201c565b836001819055508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508260c081815250508167ffffffffffffffff1660e08167ffffffffffffffff16815250508063ffffffff166101008163ffffffff16815250506001600860006101000a81548160ff021916908360028111156200012b576200012a6200044b565b5b021790555084600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050506200047a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200027b826200024e565b9050919050565b6200028d816200026e565b81146200029957600080fd5b50565b600081519050620002ad8162000282565b92915050565b6000819050919050565b620002c881620002b3565b8114620002d457600080fd5b50565b600081519050620002e881620002bd565b92915050565b6000819050919050565b6200030381620002ee565b81146200030f57600080fd5b50565b6000815190506200032381620002f8565b92915050565b600067ffffffffffffffff82169050919050565b620003488162000329565b81146200035457600080fd5b50565b60008151905062000368816200033d565b92915050565b600063ffffffff82169050919050565b62000389816200036e565b81146200039557600080fd5b50565b600081519050620003a9816200037e565b92915050565b60008060008060008060c08789031215620003cf57620003ce62000249565b5b6000620003df89828a016200029c565b9650506020620003f289828a016200029c565b95505060406200040589828a01620002d7565b94505060606200041889828a0162000312565b93505060806200042b89828a0162000357565b92505060a06200043e89828a0162000398565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161288b620004e2600039600081816105f10152610ca90152600081816105ce0152610c860152600081816105ad0152610c650152600081816105710152610c290152600081816103db015261042f015261288b6000f3fe6080604052600436106100fe5760003560e01c8063715018a611610095578063cd38aa8711610064578063cd38aa87146102c9578063d537b482146102e0578063dd11247e14610309578063dfd39a8214610334578063f2fde38b1461035f576100fe565b8063715018a6146102665780638678a7b21461027d5780638da5cb5b14610294578063c1af5785146102bf576100fe565b80634585e33b116100d15780634585e33b146101bd5780636b68c03c146101e65780636e04ff0d146102115780636fd098161461024f576100fe565b80630484a22f1461010357806312065fe0146101405780631fe543e31461016b5780632c1e816d14610194575b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190611c92565b610388565b6040516101379190611cd8565b60405180910390f35b34801561014c57600080fd5b506101556103d1565b6040516101629190611cd8565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190611e78565b6103d9565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190611c92565b610499565b005b3480156101c957600080fd5b506101e460048036038101906101df9190611f89565b6104e5565b005b3480156101f257600080fd5b506101fb6106a9565b60405161020891906121dd565b60405180910390f35b34801561021d57600080fd5b5061023860048036038101906102339190611f89565b61099e565b60405161024692919061226f565b60405180910390f35b34801561025b57600080fd5b50610264610adb565b005b34801561027257600080fd5b5061027b610c09565b005b34801561028957600080fd5b50610292610c1d565b005b3480156102a057600080fd5b506102a9610d5f565b6040516102b691906122ae565b60405180910390f35b6102c7610d88565b005b3480156102d557600080fd5b506102de61101b565b005b3480156102ec57600080fd5b50610307600480360381019061030291906122c9565b611321565b005b34801561031557600080fd5b5061031e611426565b60405161032b9190611cd8565b60405180910390f35b34801561034057600080fd5b5061034961142c565b6040516103569190611cd8565b60405180910390f35b34801561036b57600080fd5b5061038660048036038101906103819190611c92565b611432565b005b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610482929190612330565b60405180910390fd5b61049582826114b5565b5050565b6104a161170b565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006104ff6040518060200160405280600081525061099e565b50905080610542576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610539906123b6565b60405180910390fd5b6002600860006101000a81548160ff02191690836002811115610568576105676123d6565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161063295949392919061247d565b6020604051808303816000875af1158015610651573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067591906124e5565b9050807fff4d9122b4213ff3ee8322521d6bc1397ad727d4563e02f00b3346cf834fe07560405160405180910390a2505050565b6106b1611a89565b6060600060028111156106c7576106c66123d6565b5b600860009054906101000a900460ff1660028111156106e9576106e86123d6565b5b0361072b576040518060400160405280600481526020017f4f70656e0000000000000000000000000000000000000000000000000000000081525090506107dd565b6001600281111561073f5761073e6123d6565b5b600860009054906101000a900460ff166002811115610761576107606123d6565b5b036107a3576040518060400160405280600681526020017f436c6f736564000000000000000000000000000000000000000000000000000081525090506107dc565b6040518060400160405280600f81526020017f43686f6f73696e672077696e6e6572000000000000000000000000000000000081525090505b5b600060068054905067ffffffffffffffff8111156107fe576107fd611d35565b5b60405190808252806020026020018201604052801561083757816020015b610824611abf565b81526020019060019003908161081c5790505b50905060005b6006805490508110156109615760405180604001604052806006838154811061086957610868612512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160056000600685815481106108c7576108c6612512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481525082828151811061094357610942612512565b5b6020026020010181905250808061095990612570565b91505061083d565b506040518060c001604052806001548152602001600254815260200160035481526020018281526020016007548152602001838152509250505090565b6000606060008060028111156109b7576109b66123d6565b5b600860009054906101000a900460ff1660028111156109d9576109d86123d6565b5b1480156109f4575060075461012c426109f291906125b8565b115b90508015610a54576002600860006101000a81548160ff02191690836002811115610a2257610a216123d6565b5b02179055507fcc6032347cc2be37f56c46ff482afcf501eb1d147838857e117fe49234b1f12e60405160405180910390a15b7f1f0c74a6ed90b1a7bf068275bbcd025d930b08a7be83baae85787f9a5ac624c742600754604051610a879291906125ec565b60405180910390a1600280811115610aa257610aa16123d6565b5b600860009054906101000a900460ff166002811115610ac457610ac36123d6565b5b148015610ad357506007544210155b925050915091565b610ae361170b565b60006002811115610af757610af66123d6565b5b600860009054906101000a900460ff166002811115610b1957610b186123d6565b5b14610b50576040517f68e3d0e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600860006101000a81548160ff02191690836002811115610b7657610b756123d6565b5b0217905550600067ffffffffffffffff811115610b9657610b95611d35565b5b604051908082528060200260200182016040528015610bc45781602001602082028036833780820191505090505b5060049080519060200190610bda929190611aef565b507ffc2b180437972a94a98d643b705025c6263c595cce057cc3d910384b8d1d210c60405160405180910390a1565b610c1161170b565b610c1b6000611789565b565b610c2561170b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610cea95949392919061247d565b6020604051808303816000875af1158015610d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2d91906124e5565b9050807fff4d9122b4213ff3ee8322521d6bc1397ad727d4563e02f00b3346cf834fe07560405160405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002811115610d9c57610d9b6123d6565b5b600860009054906101000a900460ff166002811115610dbe57610dbd6123d6565b5b14610df5576040517f68e3d0e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154341015610e31576040517f3b82066900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060015434610e419190612644565b90508060096000828254610e5591906125b8565b9250508190555060005b81811015610edd576004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610ed590612570565b915050610e5f565b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610f89576006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fd891906125b8565b925050819055507fc28711c8dcc0cb3d25732e13809d1d8c2640669a0a3fb4f7729810a9caaffdff3382604051611010929190612675565b60405180910390a150565b61102361170b565b600280811115611036576110356123d6565b5b600860009054906101000a900460ff166002811115611058576110576123d6565b5b1461108f576040517f7901144300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600860006101000a81548160ff021916908360028111156110b5576110b46123d6565b5b0217905550600060026004805490506110ce9190612644565b90506000600482815481106110e6576110e5612512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff81111561112e5761112d611d35565b5b60405190808252806020026020018201604052801561115c5781602001602082028036833780820191505090505b5060049080519060200190611172929190611aef565b5060006064605a47611184919061269e565b61118e9190612644565b905060008273ffffffffffffffffffffffffffffffffffffffff16826040516111b690612711565b60006040518083038185875af1925050503d80600081146111f3576040519150601f19603f3d011682016040523d82523d6000602084013e6111f8565b606091505b505090506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161124490612711565b60006040518083038185875af1925050503d8060008114611281576040519150601f19603f3d011682016040523d82523d6000602084013e611286565b606091505b505090508373ffffffffffffffffffffffffffffffffffffffff167fc5d1e2a43e1052756e222065802cb80a029bfaf7045b3df42c5c87b92e48de41846040516112d09190611cd8565b60405180910390a28115806112e3575080155b1561131a576040517fe88a1fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b61132961170b565b6000600281111561133d5761133c6123d6565b5b600860009054906101000a900460ff16600281111561135f5761135e6123d6565b5b03611396576040517f7901144300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001819055508260028190555081600381905550603c816113b8919061269e565b426113c391906125b8565b6007819055506000600860006101000a81548160ff021916908360028111156113ef576113ee6123d6565b5b02179055507fd029c7c68d943f92286a7825fa6aa2deefa1eee46cee6c91b7e483fd06d27baf60405160405180910390a150505050565b60095481565b60015481565b61143a61170b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a090612798565b60405180910390fd5b6114b281611789565b50565b6001600860006101000a81548160ff021916908360028111156114db576114da6123d6565b5b02179055506000600480549050826000815181106114fc576114fb612512565b5b602002602001015161150e91906127b8565b905060006004828154811061152657611525612512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006064605a47611564919061269e565b61156e9190612644565b905060008273ffffffffffffffffffffffffffffffffffffffff168260405161159690612711565b60006040518083038185875af1925050503d80600081146115d3576040519150601f19603f3d011682016040523d82523d6000602084013e6115d8565b606091505b505090506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161162490612711565b60006040518083038185875af1925050503d8060008114611661576040519150601f19603f3d011682016040523d82523d6000602084013e611666565b606091505b505090508373ffffffffffffffffffffffffffffffffffffffff167fc5d1e2a43e1052756e222065802cb80a029bfaf7045b3df42c5c87b92e48de41846040516116b09190611cd8565b60405180910390a26116c061184d565b8115806116cb575080155b15611702576040517fe88a1fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b611713611a81565b73ffffffffffffffffffffffffffffffffffffffff16611731610d5f565b73ffffffffffffffffffffffffffffffffffffffff1614611787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177e90612835565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060068054806020026020016040519081016040528092919081815260200182805480156118d157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611887575b50505050509050600067ffffffffffffffff8111156118f3576118f2611d35565b5b6040519080825280602002602001820160405280156119215781602001602082028036833780820191505090505b5060049080519060200190611937929190611aef565b5060005b81518110156119b65760006005600084848151811061195d5761195c612512565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806119ae90612570565b91505061193b565b50600067ffffffffffffffff8111156119d2576119d1611d35565b5b604051908082528060200260200182016040528015611a005781602001602082028036833780820191505090505b5060069080519060200190611a16929190611b79565b506001600860006101000a81548160ff02191690836002811115611a3d57611a3c6123d6565b5b0217905550600060028190555060006003819055507ffc2b180437972a94a98d643b705025c6263c595cce057cc3d910384b8d1d210c60405160405180910390a150565b600033905090565b6040518060c001604052806000815260200160008152602001600081526020016060815260200160008152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b828054828255906000526020600020908101928215611b68579160200282015b82811115611b675782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b0f565b5b509050611b759190611c03565b5090565b828054828255906000526020600020908101928215611bf2579160200282015b82811115611bf15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b99565b5b509050611bff9190611c03565b5090565b5b80821115611c1c576000816000905550600101611c04565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c5f82611c34565b9050919050565b611c6f81611c54565b8114611c7a57600080fd5b50565b600081359050611c8c81611c66565b92915050565b600060208284031215611ca857611ca7611c2a565b5b6000611cb684828501611c7d565b91505092915050565b6000819050919050565b611cd281611cbf565b82525050565b6000602082019050611ced6000830184611cc9565b92915050565b611cfc81611cbf565b8114611d0757600080fd5b50565b600081359050611d1981611cf3565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d6d82611d24565b810181811067ffffffffffffffff82111715611d8c57611d8b611d35565b5b80604052505050565b6000611d9f611c20565b9050611dab8282611d64565b919050565b600067ffffffffffffffff821115611dcb57611dca611d35565b5b602082029050602081019050919050565b600080fd5b6000611df4611def84611db0565b611d95565b90508083825260208201905060208402830185811115611e1757611e16611ddc565b5b835b81811015611e405780611e2c8882611d0a565b845260208401935050602081019050611e19565b5050509392505050565b600082601f830112611e5f57611e5e611d1f565b5b8135611e6f848260208601611de1565b91505092915050565b60008060408385031215611e8f57611e8e611c2a565b5b6000611e9d85828601611d0a565b925050602083013567ffffffffffffffff811115611ebe57611ebd611c2f565b5b611eca85828601611e4a565b9150509250929050565b600080fd5b600067ffffffffffffffff821115611ef457611ef3611d35565b5b611efd82611d24565b9050602081019050919050565b82818337600083830152505050565b6000611f2c611f2784611ed9565b611d95565b905082815260208101848484011115611f4857611f47611ed4565b5b611f53848285611f0a565b509392505050565b600082601f830112611f7057611f6f611d1f565b5b8135611f80848260208601611f19565b91505092915050565b600060208284031215611f9f57611f9e611c2a565b5b600082013567ffffffffffffffff811115611fbd57611fbc611c2f565b5b611fc984828501611f5b565b91505092915050565b611fdb81611cbf565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61201681611c54565b82525050565b604082016000820151612032600085018261200d565b5060208201516120456020850182611fd2565b50505050565b6000612057838361201c565b60408301905092915050565b6000602082019050919050565b600061207b82611fe1565b6120858185611fec565b935061209083611ffd565b8060005b838110156120c15781516120a8888261204b565b97506120b383612063565b925050600181019050612094565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121085780820151818401526020810190506120ed565b60008484015250505050565b600061211f826120ce565b61212981856120d9565b93506121398185602086016120ea565b61214281611d24565b840191505092915050565b600060c0830160008301516121656000860182611fd2565b5060208301516121786020860182611fd2565b50604083015161218b6040860182611fd2565b50606083015184820360608601526121a38282612070565b91505060808301516121b86080860182611fd2565b5060a083015184820360a08601526121d08282612114565b9150508091505092915050565b600060208201905081810360008301526121f7818461214d565b905092915050565b60008115159050919050565b612214816121ff565b82525050565b600081519050919050565b600082825260208201905092915050565b60006122418261221a565b61224b8185612225565b935061225b8185602086016120ea565b61226481611d24565b840191505092915050565b6000604082019050612284600083018561220b565b81810360208301526122968184612236565b90509392505050565b6122a881611c54565b82525050565b60006020820190506122c3600083018461229f565b92915050565b600080600080608085870312156122e3576122e2611c2a565b5b60006122f187828801611d0a565b945050602061230287828801611d0a565b935050604061231387828801611d0a565b925050606061232487828801611d0a565b91505092959194509250565b6000604082019050612345600083018561229f565b612352602083018461229f565b9392505050565b600082825260208201905092915050565b7f4e6f2075706b656570206e656564656400000000000000000000000000000000600082015250565b60006123a0601083612359565b91506123ab8261236a565b602082019050919050565b600060208201905081810360008301526123cf81612393565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b61241881612405565b82525050565b600067ffffffffffffffff82169050919050565b61243b8161241e565b82525050565b600061ffff82169050919050565b61245881612441565b82525050565b600063ffffffff82169050919050565b6124778161245e565b82525050565b600060a082019050612492600083018861240f565b61249f6020830187612432565b6124ac604083018661244f565b6124b9606083018561246e565b6124c6608083018461246e565b9695505050505050565b6000815190506124df81611cf3565b92915050565b6000602082840312156124fb576124fa611c2a565b5b6000612509848285016124d0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061257b82611cbf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125ad576125ac612541565b5b600182019050919050565b60006125c382611cbf565b91506125ce83611cbf565b92508282019050808211156125e6576125e5612541565b5b92915050565b60006040820190506126016000830185611cc9565b61260e6020830184611cc9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061264f82611cbf565b915061265a83611cbf565b92508261266a57612669612615565b5b828204905092915050565b600060408201905061268a600083018561229f565b6126976020830184611cc9565b9392505050565b60006126a982611cbf565b91506126b483611cbf565b92508282026126c281611cbf565b915082820484148315176126d9576126d8612541565b5b5092915050565b600081905092915050565b50565b60006126fb6000836126e0565b9150612706826126eb565b600082019050919050565b600061271c826126ee565b9150819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612782602683612359565b915061278d82612726565b604082019050919050565b600060208201905081810360008301526127b181612775565b9050919050565b60006127c382611cbf565b91506127ce83611cbf565b9250826127de576127dd612615565b5b828206905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061281f602083612359565b915061282a826127e9565b602082019050919050565b6000602082019050818103600083015261284e81612812565b905091905056fea2646970667358221220df1cf1c004537420f0aa7d1547909105a872760b44d849473b6263e0e0f8ff2e64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c8063715018a611610095578063cd38aa8711610064578063cd38aa87146102c9578063d537b482146102e0578063dd11247e14610309578063dfd39a8214610334578063f2fde38b1461035f576100fe565b8063715018a6146102665780638678a7b21461027d5780638da5cb5b14610294578063c1af5785146102bf576100fe565b80634585e33b116100d15780634585e33b146101bd5780636b68c03c146101e65780636e04ff0d146102115780636fd098161461024f576100fe565b80630484a22f1461010357806312065fe0146101405780631fe543e31461016b5780632c1e816d14610194575b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190611c92565b610388565b6040516101379190611cd8565b60405180910390f35b34801561014c57600080fd5b506101556103d1565b6040516101629190611cd8565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190611e78565b6103d9565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190611c92565b610499565b005b3480156101c957600080fd5b506101e460048036038101906101df9190611f89565b6104e5565b005b3480156101f257600080fd5b506101fb6106a9565b60405161020891906121dd565b60405180910390f35b34801561021d57600080fd5b5061023860048036038101906102339190611f89565b61099e565b60405161024692919061226f565b60405180910390f35b34801561025b57600080fd5b50610264610adb565b005b34801561027257600080fd5b5061027b610c09565b005b34801561028957600080fd5b50610292610c1d565b005b3480156102a057600080fd5b506102a9610d5f565b6040516102b691906122ae565b60405180910390f35b6102c7610d88565b005b3480156102d557600080fd5b506102de61101b565b005b3480156102ec57600080fd5b50610307600480360381019061030291906122c9565b611321565b005b34801561031557600080fd5b5061031e611426565b60405161032b9190611cd8565b60405180910390f35b34801561034057600080fd5b5061034961142c565b6040516103569190611cd8565b60405180910390f35b34801561036b57600080fd5b5061038660048036038101906103819190611c92565b611432565b005b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610482929190612330565b60405180910390fd5b61049582826114b5565b5050565b6104a161170b565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006104ff6040518060200160405280600081525061099e565b50905080610542576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610539906123b6565b60405180910390fd5b6002600860006101000a81548160ff02191690836002811115610568576105676123d6565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161063295949392919061247d565b6020604051808303816000875af1158015610651573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067591906124e5565b9050807fff4d9122b4213ff3ee8322521d6bc1397ad727d4563e02f00b3346cf834fe07560405160405180910390a2505050565b6106b1611a89565b6060600060028111156106c7576106c66123d6565b5b600860009054906101000a900460ff1660028111156106e9576106e86123d6565b5b0361072b576040518060400160405280600481526020017f4f70656e0000000000000000000000000000000000000000000000000000000081525090506107dd565b6001600281111561073f5761073e6123d6565b5b600860009054906101000a900460ff166002811115610761576107606123d6565b5b036107a3576040518060400160405280600681526020017f436c6f736564000000000000000000000000000000000000000000000000000081525090506107dc565b6040518060400160405280600f81526020017f43686f6f73696e672077696e6e6572000000000000000000000000000000000081525090505b5b600060068054905067ffffffffffffffff8111156107fe576107fd611d35565b5b60405190808252806020026020018201604052801561083757816020015b610824611abf565b81526020019060019003908161081c5790505b50905060005b6006805490508110156109615760405180604001604052806006838154811061086957610868612512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160056000600685815481106108c7576108c6612512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481525082828151811061094357610942612512565b5b6020026020010181905250808061095990612570565b91505061083d565b506040518060c001604052806001548152602001600254815260200160035481526020018281526020016007548152602001838152509250505090565b6000606060008060028111156109b7576109b66123d6565b5b600860009054906101000a900460ff1660028111156109d9576109d86123d6565b5b1480156109f4575060075461012c426109f291906125b8565b115b90508015610a54576002600860006101000a81548160ff02191690836002811115610a2257610a216123d6565b5b02179055507fcc6032347cc2be37f56c46ff482afcf501eb1d147838857e117fe49234b1f12e60405160405180910390a15b7f1f0c74a6ed90b1a7bf068275bbcd025d930b08a7be83baae85787f9a5ac624c742600754604051610a879291906125ec565b60405180910390a1600280811115610aa257610aa16123d6565b5b600860009054906101000a900460ff166002811115610ac457610ac36123d6565b5b148015610ad357506007544210155b925050915091565b610ae361170b565b60006002811115610af757610af66123d6565b5b600860009054906101000a900460ff166002811115610b1957610b186123d6565b5b14610b50576040517f68e3d0e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600860006101000a81548160ff02191690836002811115610b7657610b756123d6565b5b0217905550600067ffffffffffffffff811115610b9657610b95611d35565b5b604051908082528060200260200182016040528015610bc45781602001602082028036833780820191505090505b5060049080519060200190610bda929190611aef565b507ffc2b180437972a94a98d643b705025c6263c595cce057cc3d910384b8d1d210c60405160405180910390a1565b610c1161170b565b610c1b6000611789565b565b610c2561170b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610cea95949392919061247d565b6020604051808303816000875af1158015610d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2d91906124e5565b9050807fff4d9122b4213ff3ee8322521d6bc1397ad727d4563e02f00b3346cf834fe07560405160405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002811115610d9c57610d9b6123d6565b5b600860009054906101000a900460ff166002811115610dbe57610dbd6123d6565b5b14610df5576040517f68e3d0e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154341015610e31576040517f3b82066900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060015434610e419190612644565b90508060096000828254610e5591906125b8565b9250508190555060005b81811015610edd576004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610ed590612570565b915050610e5f565b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610f89576006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fd891906125b8565b925050819055507fc28711c8dcc0cb3d25732e13809d1d8c2640669a0a3fb4f7729810a9caaffdff3382604051611010929190612675565b60405180910390a150565b61102361170b565b600280811115611036576110356123d6565b5b600860009054906101000a900460ff166002811115611058576110576123d6565b5b1461108f576040517f7901144300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600860006101000a81548160ff021916908360028111156110b5576110b46123d6565b5b0217905550600060026004805490506110ce9190612644565b90506000600482815481106110e6576110e5612512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff81111561112e5761112d611d35565b5b60405190808252806020026020018201604052801561115c5781602001602082028036833780820191505090505b5060049080519060200190611172929190611aef565b5060006064605a47611184919061269e565b61118e9190612644565b905060008273ffffffffffffffffffffffffffffffffffffffff16826040516111b690612711565b60006040518083038185875af1925050503d80600081146111f3576040519150601f19603f3d011682016040523d82523d6000602084013e6111f8565b606091505b505090506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161124490612711565b60006040518083038185875af1925050503d8060008114611281576040519150601f19603f3d011682016040523d82523d6000602084013e611286565b606091505b505090508373ffffffffffffffffffffffffffffffffffffffff167fc5d1e2a43e1052756e222065802cb80a029bfaf7045b3df42c5c87b92e48de41846040516112d09190611cd8565b60405180910390a28115806112e3575080155b1561131a576040517fe88a1fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b61132961170b565b6000600281111561133d5761133c6123d6565b5b600860009054906101000a900460ff16600281111561135f5761135e6123d6565b5b03611396576040517f7901144300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001819055508260028190555081600381905550603c816113b8919061269e565b426113c391906125b8565b6007819055506000600860006101000a81548160ff021916908360028111156113ef576113ee6123d6565b5b02179055507fd029c7c68d943f92286a7825fa6aa2deefa1eee46cee6c91b7e483fd06d27baf60405160405180910390a150505050565b60095481565b60015481565b61143a61170b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a090612798565b60405180910390fd5b6114b281611789565b50565b6001600860006101000a81548160ff021916908360028111156114db576114da6123d6565b5b02179055506000600480549050826000815181106114fc576114fb612512565b5b602002602001015161150e91906127b8565b905060006004828154811061152657611525612512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006064605a47611564919061269e565b61156e9190612644565b905060008273ffffffffffffffffffffffffffffffffffffffff168260405161159690612711565b60006040518083038185875af1925050503d80600081146115d3576040519150601f19603f3d011682016040523d82523d6000602084013e6115d8565b606091505b505090506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161162490612711565b60006040518083038185875af1925050503d8060008114611661576040519150601f19603f3d011682016040523d82523d6000602084013e611666565b606091505b505090508373ffffffffffffffffffffffffffffffffffffffff167fc5d1e2a43e1052756e222065802cb80a029bfaf7045b3df42c5c87b92e48de41846040516116b09190611cd8565b60405180910390a26116c061184d565b8115806116cb575080155b15611702576040517fe88a1fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b611713611a81565b73ffffffffffffffffffffffffffffffffffffffff16611731610d5f565b73ffffffffffffffffffffffffffffffffffffffff1614611787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177e90612835565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060068054806020026020016040519081016040528092919081815260200182805480156118d157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611887575b50505050509050600067ffffffffffffffff8111156118f3576118f2611d35565b5b6040519080825280602002602001820160405280156119215781602001602082028036833780820191505090505b5060049080519060200190611937929190611aef565b5060005b81518110156119b65760006005600084848151811061195d5761195c612512565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806119ae90612570565b91505061193b565b50600067ffffffffffffffff8111156119d2576119d1611d35565b5b604051908082528060200260200182016040528015611a005781602001602082028036833780820191505090505b5060069080519060200190611a16929190611b79565b506001600860006101000a81548160ff02191690836002811115611a3d57611a3c6123d6565b5b0217905550600060028190555060006003819055507ffc2b180437972a94a98d643b705025c6263c595cce057cc3d910384b8d1d210c60405160405180910390a150565b600033905090565b6040518060c001604052806000815260200160008152602001600081526020016060815260200160008152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b828054828255906000526020600020908101928215611b68579160200282015b82811115611b675782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b0f565b5b509050611b759190611c03565b5090565b828054828255906000526020600020908101928215611bf2579160200282015b82811115611bf15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b99565b5b509050611bff9190611c03565b5090565b5b80821115611c1c576000816000905550600101611c04565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c5f82611c34565b9050919050565b611c6f81611c54565b8114611c7a57600080fd5b50565b600081359050611c8c81611c66565b92915050565b600060208284031215611ca857611ca7611c2a565b5b6000611cb684828501611c7d565b91505092915050565b6000819050919050565b611cd281611cbf565b82525050565b6000602082019050611ced6000830184611cc9565b92915050565b611cfc81611cbf565b8114611d0757600080fd5b50565b600081359050611d1981611cf3565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d6d82611d24565b810181811067ffffffffffffffff82111715611d8c57611d8b611d35565b5b80604052505050565b6000611d9f611c20565b9050611dab8282611d64565b919050565b600067ffffffffffffffff821115611dcb57611dca611d35565b5b602082029050602081019050919050565b600080fd5b6000611df4611def84611db0565b611d95565b90508083825260208201905060208402830185811115611e1757611e16611ddc565b5b835b81811015611e405780611e2c8882611d0a565b845260208401935050602081019050611e19565b5050509392505050565b600082601f830112611e5f57611e5e611d1f565b5b8135611e6f848260208601611de1565b91505092915050565b60008060408385031215611e8f57611e8e611c2a565b5b6000611e9d85828601611d0a565b925050602083013567ffffffffffffffff811115611ebe57611ebd611c2f565b5b611eca85828601611e4a565b9150509250929050565b600080fd5b600067ffffffffffffffff821115611ef457611ef3611d35565b5b611efd82611d24565b9050602081019050919050565b82818337600083830152505050565b6000611f2c611f2784611ed9565b611d95565b905082815260208101848484011115611f4857611f47611ed4565b5b611f53848285611f0a565b509392505050565b600082601f830112611f7057611f6f611d1f565b5b8135611f80848260208601611f19565b91505092915050565b600060208284031215611f9f57611f9e611c2a565b5b600082013567ffffffffffffffff811115611fbd57611fbc611c2f565b5b611fc984828501611f5b565b91505092915050565b611fdb81611cbf565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61201681611c54565b82525050565b604082016000820151612032600085018261200d565b5060208201516120456020850182611fd2565b50505050565b6000612057838361201c565b60408301905092915050565b6000602082019050919050565b600061207b82611fe1565b6120858185611fec565b935061209083611ffd565b8060005b838110156120c15781516120a8888261204b565b97506120b383612063565b925050600181019050612094565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121085780820151818401526020810190506120ed565b60008484015250505050565b600061211f826120ce565b61212981856120d9565b93506121398185602086016120ea565b61214281611d24565b840191505092915050565b600060c0830160008301516121656000860182611fd2565b5060208301516121786020860182611fd2565b50604083015161218b6040860182611fd2565b50606083015184820360608601526121a38282612070565b91505060808301516121b86080860182611fd2565b5060a083015184820360a08601526121d08282612114565b9150508091505092915050565b600060208201905081810360008301526121f7818461214d565b905092915050565b60008115159050919050565b612214816121ff565b82525050565b600081519050919050565b600082825260208201905092915050565b60006122418261221a565b61224b8185612225565b935061225b8185602086016120ea565b61226481611d24565b840191505092915050565b6000604082019050612284600083018561220b565b81810360208301526122968184612236565b90509392505050565b6122a881611c54565b82525050565b60006020820190506122c3600083018461229f565b92915050565b600080600080608085870312156122e3576122e2611c2a565b5b60006122f187828801611d0a565b945050602061230287828801611d0a565b935050604061231387828801611d0a565b925050606061232487828801611d0a565b91505092959194509250565b6000604082019050612345600083018561229f565b612352602083018461229f565b9392505050565b600082825260208201905092915050565b7f4e6f2075706b656570206e656564656400000000000000000000000000000000600082015250565b60006123a0601083612359565b91506123ab8261236a565b602082019050919050565b600060208201905081810360008301526123cf81612393565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b61241881612405565b82525050565b600067ffffffffffffffff82169050919050565b61243b8161241e565b82525050565b600061ffff82169050919050565b61245881612441565b82525050565b600063ffffffff82169050919050565b6124778161245e565b82525050565b600060a082019050612492600083018861240f565b61249f6020830187612432565b6124ac604083018661244f565b6124b9606083018561246e565b6124c6608083018461246e565b9695505050505050565b6000815190506124df81611cf3565b92915050565b6000602082840312156124fb576124fa611c2a565b5b6000612509848285016124d0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061257b82611cbf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125ad576125ac612541565b5b600182019050919050565b60006125c382611cbf565b91506125ce83611cbf565b92508282019050808211156125e6576125e5612541565b5b92915050565b60006040820190506126016000830185611cc9565b61260e6020830184611cc9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061264f82611cbf565b915061265a83611cbf565b92508261266a57612669612615565b5b828204905092915050565b600060408201905061268a600083018561229f565b6126976020830184611cc9565b9392505050565b60006126a982611cbf565b91506126b483611cbf565b92508282026126c281611cbf565b915082820484148315176126d9576126d8612541565b5b5092915050565b600081905092915050565b50565b60006126fb6000836126e0565b9150612706826126eb565b600082019050919050565b600061271c826126ee565b9150819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612782602683612359565b915061278d82612726565b604082019050919050565b600060208201905081810360008301526127b181612775565b9050919050565b60006127c382611cbf565b91506127ce83611cbf565b9250826127de576127dd612615565b5b828206905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061281f602083612359565b915061282a826127e9565b602082019050919050565b6000602082019050818103600083015261284e81612812565b905091905056fea2646970667358221220df1cf1c004537420f0aa7d1547909105a872760b44d849473b6263e0e0f8ff2e64736f6c63430008110033",
  "devdoc": {
    "author": "Michal Vokolek",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A fair lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating untamperable decentralized lottery with fair chance for everyone to win.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1223,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1425,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_ticketFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1427,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_ticketSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1429,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_maxTicketsPerPlayer",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1432,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_tickets",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1436,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_ticketsPerPlayer",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1439,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_ticketsPerPlayerKeys",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1441,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryDeadline",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1447,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "8",
        "type": "t_enum(LotteryState)1423"
      },
      {
        "astId": 1449,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "totalTickets",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1463,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_adminAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)1423": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}